\todo
\begin{enumerate}[nolistsep]
  - limits
  - the beauty of the phrase exact approximation
  - partial derivatives
  - derivative of vectors and matrices, jacobians, hessians, laplacians etc...
\end{enumerate}

\begin{enumerate}[nolistsep]
  - \todo
  - Cdf and pdf definitions
  - Expected value definitions
  - Joint probability definition
  - Joint vs Conditional probability
  - Functions of random variable
  - Random vectors
  - baysian networks, HMM, Markov, MDP, Q-learning ...
  - How to determine if an experiment is stochastic?
  - How to determine where the simple division conditional probability rule is not good?
\end{enumerate}

\todo
\begin{enumerate}[nolistsep]
  - composition of linear transforms, composition as product of matrices, building matrix as tool
  - proof of composition of linear transform is a linear transform, algebraically and geometrically
  - misconceptions: \xcancel{animating vectors} vs \xcancel{animating coordinate frames} don't try to animate (lerp) anything
  - latest frame vs initial frame
  - representation of rotation: rot mat, quaternions, axis-angle, eular, roll pitch yaw, gimbal lock
  - determinant, descriminant whatever
  - cross product
  - inverses
  - column spaces, rank
  - null spaces
  - eigen stuff, eigen basis
  - orthogonal, orthonormal
  - diagnoal
  - quaternions
  - SVD, other easy useful decompositions
  - quadratic systems using matrices like $X^TAX$.
  - derivatives of matrices, matrix products like $X^T X$.
\end{enumerate}

\todo
\begin{enumerate}[nolistsep]
  - multiplication of quaternions is not commutative
  - rot mat $<-`>$ eular angle $<->$ rpy
  - what is gimbal lock? not single solution with gimbal lock?
  - axis-angle $<->$ rotation matrix - eigen basis, null space finding
  - Code/Visualize/Animate the math
  - how to tell which system has how many and what type  of solutions? and what is a solution exactly?
  - sensing: hw1 p1 how is orientation not determinable?
  - $a^T * b = b^T$ * a iff a, b are vectors
  - what is determinant of transform matrix with only rotation and translation ? == 1
  - composition of linear transformations
  - rotation \& quaternions
\end{enumerate}

\todo
\begin{enumerate}[nolistsep]
  - data is a plural and a pronoun.
  - accuracy vs precision
  - estimation = estimate + uncertainity
  - modelling uncertainity using stochasticity
  - given a parametrized "stochastically noisy" model with stimulus and response (vector) variable and some samples, the process of estimating parameters (a.k.a fitting model). Using optimization for this estimation. Other non-optimization ways of doing the same. The essence of ML.
\end{enumerate}

\section{}
\begin{enumerate}[nolistsep]
  - $(x_i - min) / (max - min)$ set of values vs normalizing set of values, show they are not equal in some instances and properties of each
  - emphasize diff b/w
    \begin{enumerate}[nolistsep]
        - min(sum(abs(residual))) $\equiv$ min(Sum of Absolute Errors). The average of SAE is MAE
        - min(sum(residual * residual)) $\equiv$ min(Sum of Sqaured Errors). The average of SSE is MSE
        - min(sum(perpendicular distance)) $\equiv$ min(Sum of Perpendicular Errors). The average of SPE is MPE
    \end{enumerate}
  - Thinking mean and variance visually, mean of a list of numbers plotted on a co-ordinate system is "the rough line passing through the center", take differences from the rough center line to actual values and square them. Each of these towers or inverted towers can be thought to represent "certain variation" from the mean. Average (/n-1) of all this is defined as "variance". Etymology of "variance". observed the sqaured fn to ignore signs and preserve differentiability. Mind blown!!!. And all this from visualizing the definitions.
  - R-squared = Explained variation / Total variation. what it means (capturing the variation for just the samples in context and does not say anything about predictablility of model), and especially what it does not mean (good/bad model (patterns in residual plots)). Is it scale invariant?
  - Shallow vs deep classifiers $\equiv$ seperate description and classification vs together description and classification.
\end{enumerate}

\section{}
\begin{enumerate}[nolistsep]
  - does uncertainity change during fitting process?
  - patterns in residual plots as a measure of good or bad model.
  - Compare MLE vs MAP vs Linear Regression on.
    \begin{enumerate}[nolistsep]
        - fitting function
        - measure of accuracy, measure of uncertainity
        - covariance
    \end{enumerate}
  - Determining uncertainity after fitting in linear regression (or other models). Using info about training datum (a.k.a. sample) error term?
\end{enumerate}

\todo : add some structure

\section{Irony of thoughts}
\begin{enumerate}[nolistsep]
  - There exist things which we don't know but can approximate (ex. integrals)
\end{enumerate}

\section{Long project lessons}
\begin{enumerate}[nolistsep]
  - The best task management system until now is a white board and a marker
  - The best information note taking system is taking no notes at all
  - The best running notes are the ones that are forgotten shortly later
  - The best information gathering system until now is this journal
\end{enumerate}

\section{Fuzzily separated tree searches}
\begin{enumerate}[nolistsep]
  - Ones that have no state
  - Ones that have a fixed size state (finding nearest vertex to a position)
  - Ones that have a per-vertex state (path from start to current vertex)
\end{enumerate}

\section{Misc}
\begin{enumerate}[nolistsep]
  - Bitwise operations are much faster than arithmetic operations. So use them if possible. For ex in bit manipulation n, n - 1 bit manipulation trick
  - Linked list dummy initial node :P
  - Systemetic case expansion
  - Working with examples
  - Arrays that index main arrays to do things :P
  - Sometimes things to be done in second loop can be done directly in first
\end{enumerate}

\todo : add some structure

\begin{enumerate}[nolistsep]
    - Statically typed vs Dynamically typed == Compile time vs Run time type inferrence.
    - Compiled vs Interpreted == Transforming code to target machine code before running vs No transformation before running. Compiled might be faster because
        \begin{enumerate}[nolistsep]
            - It is not reading the code and transforming it for every line.
            - It can do global optimizations which might not be possible in interpreted as its field of view is local.
        \end{enumerate}
    - Statically vs Dynamically typedness is property of language. Compilation vs Interpration is the property of implementation not language; saying python is an interpreted language is wrong. Any language can be compiled. Any language can be interpreted.
    - Define, map and visualize the terms: Memory safety, Memory containment and Type safety.
\end{enumerate}

\begin{enumerate}[nolistsep]
  - C/C++/Rust
  - Java/Kotlin/Go
  - Python
  - Shell
\end{enumerate}
