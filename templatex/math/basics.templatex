\documentclass[../main.tex]{subfiles}

\begin{document}
\chapter{basics}

${ add_statement(

'Identity',

r'''
Two things A and B are identical $ \biimpl $ $ \forall context $ there is no distinction b/w them. Denoted by $ A \equiv B $.

Two things A and B are non-identical $ \biimpl $ $ \forall context $ there is distinction b/w them. Denoted by $ A \not\equiv B $.
''',

r'''
Note that this operator is binary, i.e. it takes two operands and produces a boolean.
The definition itself is quite simple but I wanted to focus on the word context.
For example, a Volkswagen car and a BMW car can be considered identical when the analysis is about classifying objects as cars and kittens.
But they can be considered non-identical if we are analyzing the properties of different car brands.
''',

r'''
\proofbydefinition
'''

) }

${ add_statement(

'Equality',

r'''
Two things A and B are equal at a context C $ \biimpl $ there is no distinction b/w them at C. Denoted by $ A = B $.

Two things A and B are unequal at a context C $ \biimpl $ there is distinction b/w them at C. Denoted by $ A \ne B $.
''',

r'''
Note that this operator is binary, i.e. it takes two operands and produces a boolean.
The definition itself is quite simple but I wanted to focus on the word context.
For example, if we are talking about the apparant positions of objects in sky to an observer, the sun and moon are equal when it is a complete solar eclipse for her.
But they can be considered unequal at all other times.
''',

r'''
\proofbydefinition
'''

) }

${ add_statement(

'Order',

r'''
Two non-identical @identity@ things are ordered $ \biimpl $ there exists an notion that one thing comes before another. If A comes before B then we write $ A < B $ or $ B > A $.
''',

r'''
There need not be order in all non-identical pairs of things. For example there is no inherent order b/w a rabbit and a horse when listing out all animals. But there is an order when we consider the heights of two students when listing out heights of students in a class.
''',

r'''
\proofbydefinition
'''

) }

${ add_statement(

'Zero',

r'''
The notion of absence.
Symbolically written as 0.
Can be considered as a number.
''',

r'''
For example in case of counting it can represent the case when there is no balls left in an urn.
''',

r'''
\proofbydefinition
'''

) }

${ add_statement(

'Number',

r'''
A number is a notion to count or to label or measure things.
''',

r'''
Some uses of numbers are
\begin{enumerate}[noitemsep,topsep=0pt]
  \item Count number of apples in a bag - There are 37 apples in a bag
  \item Measure the length of a pencil - The length of the pencil is 3.1468 cm
  \item Label each participant in a marathon - The participant number 10714 won the marathon
\end{enumerate}
''',

r'''
\proofbydefinition
'''

) }

${ add_statement(

'Notation',

r'''
A shortform representation of a tool or idea.
The representation is short doesn't mean that information is omitted, rather it motivates to present information in a more concise and simplified manner.
A good notation has complete information, is transparent in meaning, readable and un-ambiguous.
''',

r'''
For instance, when writing a vector of a position $g$, writing $ P_{g} $ is a bad notation as it has no information about the coordiante system used.
$ P^{\Lambda}_{g} $ where $ \Lambda $ is the coordinate system is a good notation.
''',

r'''
\proofbydefinition
'''

) }

${ add_statement(

'Enumerated Notation',

r'''
To name each element in a collection such that each elements name is non-identical @identity@ to all others, we arrange each element in some way and use the position @number@ as the subscript of that element. This is called enumerated notation.
For a collection having n elements the enumerated notation would be $ \{ e_1, e_2, e_3, ... e_n \} $.
\begin{itemize}[noitemsep,topsep=0pt]
  \item If n = 0, it expands to $\{\}$.
  \item If n = 1, it expands to $\{ e_1 \}$
  \item If n = 2, it expands to $\{ e_1, e_2 \}$
  \item ...
  \item If n = n, it expands to $\{ e_1, e_2, ... e_n \}$
\end{itemize}
''',

r'''
This way we can refer to each element uniquely.
This comes in handy all the time.
''',

r'''
\proofbydefinition
'''

) }

\end{document}

