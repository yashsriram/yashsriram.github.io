\documentclass[./main.tex]{subfiles}

\begin{document}
\chapter{terminology}

${ add_statement(

'Graphics',

r'''
Graphics is an image on a 2D surface.
''',

r'''
Often abused word so it is good to write down a proper definition of it.
This is an uncountable noun, therefore the plural of graphics is also graphics.
Graphics is by default singular.
Examples of graphics are paintings on [paper, canvas, walls, solid object surfaces like balls, coffee mugs, stones], images generated on computer screen.
''',

r'''
'''

) }

${ add_statement(

'Rendering',

r'''
The process of generating @graphics@ from a 2D or 3D geometric scene is called rendering.
''',

r'''
Again often abused words, so good to jot down a proper definition.
Graphics generated by computers are generally stored as a matrix of pixels.

Rasterization often refers to a specific algorithm used for the process of rendering known as scan conversion, which is a misnomer.
It is not a good practice.
To refer to scan conversion, use the word scan conversion.
''',

r'''
\proofbydefinition
'''

) }

${ add_statement(

'Ray casting',

r'''
Ray casting is an type of @rendering@ in which rays are projected from camera into the scene through each pixel on image to detect intersections with objects analytically (a.k.a in closed form).
These intersections are used to deterimine the color at each pixel.
''',

r'''
A simple and useful form of rendering.
''',

r'''
\proofbydefinition
'''

) }

${ add_statement(

'Ray marching',

r'''
Ray marching is an type of @rendering@ in which rays are projected from camera into the scene through each pixel on image in finite incremental steps.
Intersections with objects are checked at each step.
This is called a numerical approach (a.k.a open form).
These intersections are used to deterimine the color at each pixel.
''',

r'''
A simple and useful form of rendering.
''',

r'''
\proofbydefinition
'''

) }

${ add_statement(

'Ray tracing',

r'''
Ray tracing is a type of @rendering@ in which either @ray casting@ or @ray marching@ is recursively applied to determine the color at each pixel.
''',

r'''
A composition of ray casting / ray marching.
''',

r'''
\proofbydefinition
'''

) }

${ add_statement(

'Scan conversion',

r'''
Scan conversion is a type of @rendering@ in which objects in the scene are clipped, culled and transformed w.r.t a viewing fustum.
Then each pixel corresponding to each object is colored.
''',

r'''
Often ignored and/or replaced with the word rasterization.
The operations being independent makes the process parallelizable.
Actually this idea along with the motivation for making better graphics for games, movies, research etc... resulted in development of hardware that can run same instruction on multiple data simultaneously, which we now call as GPUs (graphics processing units).
Although GPUs were invented for graphics other uses were discovered recently, most notable example being the use in parallelizing matrix computations for deep learning.
GPUs that can be used for general purpose computations are named, surprise surprise, GPGPUs (general purpose GPUs).

OpenGL is made for scan conversion rendering only.
It is not made for general purpose parallel computing, not even for other rendering techniques like ray tracing.
OpenCL and CUDA are made for general purpose parallel computing.
The purpose of OpenGL is not to get access to GPU, the purpose is rendering using scan conversion.
The GPU just happens to be a good hardware for rendering using scan conversion.
''',

r'''
\proofbydefinition
'''

) }


\end{document}


